// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockTransformer is an autogenerated mock type for the Transformer type
type MockTransformer struct {
	mock.Mock
}

type MockTransformer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransformer) EXPECT() *MockTransformer_Expecter {
	return &MockTransformer_Expecter{mock: &_m.Mock}
}

// Transform provides a mock function with given fields: values
func (_m *MockTransformer) Transform(values map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(values)

	if len(ret) == 0 {
		panic("no return value specified for Transform")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (map[string]interface{}, error)); ok {
		return rf(values)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformer_Transform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transform'
type MockTransformer_Transform_Call struct {
	*mock.Call
}

// Transform is a helper method to define mock.On call
//   - values map[string]interface{}
func (_e *MockTransformer_Expecter) Transform(values interface{}) *MockTransformer_Transform_Call {
	return &MockTransformer_Transform_Call{Call: _e.mock.On("Transform", values)}
}

func (_c *MockTransformer_Transform_Call) Run(run func(values map[string]interface{})) *MockTransformer_Transform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockTransformer_Transform_Call) Return(_a0 map[string]interface{}, _a1 error) *MockTransformer_Transform_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformer_Transform_Call) RunAndReturn(run func(map[string]interface{}) (map[string]interface{}, error)) *MockTransformer_Transform_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransformer creates a new instance of MockTransformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransformer {
	mock := &MockTransformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
