// Code generated by mockery v2.40.1. DO NOT EDIT.

package protoconf

import mock "github.com/stretchr/testify/mock"

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

type MockParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParser) EXPECT() *MockParser_Expecter {
	return &MockParser_Expecter{mock: &_m.Mock}
}

// Unmarshal provides a mock function with given fields: data
func (_m *MockParser) Unmarshal(data []byte) (map[string]interface{}, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (map[string]interface{}, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) map[string]interface{}); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockParser_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type MockParser_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - data []byte
func (_e *MockParser_Expecter) Unmarshal(data interface{}) *MockParser_Unmarshal_Call {
	return &MockParser_Unmarshal_Call{Call: _e.mock.On("Unmarshal", data)}
}

func (_c *MockParser_Unmarshal_Call) Run(run func(data []byte)) *MockParser_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockParser_Unmarshal_Call) Return(_a0 map[string]interface{}, _a1 error) *MockParser_Unmarshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockParser_Unmarshal_Call) RunAndReturn(run func([]byte) (map[string]interface{}, error)) *MockParser_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
