// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields:
func (_m *MockProvider) Read() (map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockProvider_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Read() *MockProvider_Read_Call {
	return &MockProvider_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *MockProvider_Read_Call) Run(run func()) *MockProvider_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Read_Call) Return(_a0 map[string]interface{}, _a1 error) *MockProvider_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_Read_Call) RunAndReturn(run func() (map[string]interface{}, error)) *MockProvider_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBytes provides a mock function with given fields:
func (_m *MockProvider) ReadBytes() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_ReadBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBytes'
type MockProvider_ReadBytes_Call struct {
	*mock.Call
}

// ReadBytes is a helper method to define mock.On call
func (_e *MockProvider_Expecter) ReadBytes() *MockProvider_ReadBytes_Call {
	return &MockProvider_ReadBytes_Call{Call: _e.mock.On("ReadBytes")}
}

func (_c *MockProvider_ReadBytes_Call) Run(run func()) *MockProvider_ReadBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_ReadBytes_Call) Return(_a0 []byte, _a1 error) *MockProvider_ReadBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_ReadBytes_Call) RunAndReturn(run func() ([]byte, error)) *MockProvider_ReadBytes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
